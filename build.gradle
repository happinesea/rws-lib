import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
//apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'signing'


def jdkVersion = 1.9
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

group = 'com.happinesea.lib'
def currentFile = new File(".").getAbsoluteFile()
def config = new ConfigSlurper().parse(new File(currentFile.getParentFile(), 'src/main/resources/com/happinesea/happinesea.config').toURI().toURL())
version = config.happinesea.ec.rws.tool.version

def d    = new Date()
def time = new SimpleDateFormat( "HH:mm '(GMT'Z')'" ).format( d )
def date = new SimpleDateFormat( 'MMMM dd, yyyy' ).format( d )


// application info
group = 'com.happinesea'
archivesBaseName = 'rws-lib'
description = ''


//set build variables based on build type (release, continuous integration, development)
def isDevBuild
def isCiBuild
def isReleaseBuild
def sonatypeRepositoryUrl
if (hasProperty("release")) {
    isReleaseBuild = true
    //sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots"
} else if (hasProperty("ci")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
    version += "-SNAPSHOT"
}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
signing {
    required { isReleaseBuild }
    sign configurations.archives
}

uploadArchives {
    repositories {
        if (isDevBuild) {
            mavenLocal()
        }
        else {
            mavenDeployer {
                if(isReleaseBuild) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name "${archivesBaseName}"
                    packaging 'jar'
                    description "${description}"
                    url 'http://lab.happinesea.com/rws-lib.html'

                    scm {
                        url "scm:git@github.com:happinesea/rws-lib.git"
                        connection "scm:git@github.com:happinesea/rws-lib.git"
                        developerConnection "scm:git@github.com:happinesea/rws-lib.git"
                    }
                    licenses {
                        license {
                            name 'MIT'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id 'loveapple'
                            name 'Chunli Hao'
                            email 'chunli.hao@happinesea.com'
                        }
                    }
                }
            }
        }
    }
}


buildscript {
    //repositories { mavenCentral() }
    repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.palantir:jacoco-coverage:0.4.0"
    classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
  }
    
}

apply plugin: "com.palantir.jacoco-coverage"
apply plugin: "com.github.kt3k.coveralls"
jacocoCoverage {
    // Enforce minimum code coverage of 50% for every Java file.
    fileThreshold 0.5

    // Whitelist files named MyClass.java from coverage requirements.
    fileThreshold 0.0, "*.groovy"
}


dependencies {
    //compile 'org.codehaus.groovy:groovy-all:3.0.0-alpha-1'
    compile 'org.codehaus.groovy:groovy-all:2.4.12'
    compile 'org.apache.commons:commons-email:1.4'
    compile 'org.apache.httpcomponents:httpclient:4.5.5'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    compile 'org.springframework:spring-context:5.0.4.RELEASE'
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'

    compile localGroovy()

    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'junit:junit:4.12'
}


eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.kind == 'output' }*.path = 'build/bin'
    }
}
eclipseJdt  {
	doLast{
		File f = file('.settings/org.eclipse.core.resources.prefs')
		f.write('eclipse.preferences.version=1\n')
		f.append('encoding/<project>=utf-8')
	}
}

eclipse { project { name = archivesBaseName } }

repositories { mavenCentral() }

sourceSets {
    main {
	groovy { srcDirs = ['src/main/groovy'] }
    }

    test {
	groovy { srcDirs = ['src/test/groovy'] }
    }
}


groovydoc{
    use=true
    source = sourceSets.main.groovy
    groovyClasspath = configurations.compile
    windowTitle = "happinesea ${archivesBaseName} groovy docs"
    docTitle = "${archivesBaseName} API(v-${version})"
    header = '<a href="http://lab.happinesea.com" target="_blank">happinsea</a>'
    footer = '<a href="http://lab.happinesea.com" target="_blank">happinsea</a> API documentation was generated at ' + "$time on $date."
    link 'http://download.oracle.com/javase/7/docs/api/', 'java.'
    link 'http://docs.groovy-lang.org/latest/html/gapi/', 'groovy.', 'org.codehaus.groovy.'
}

jar {
  manifest {
    attributes 'Implementation-Title': 'RWS(RMS WEB SERVICE) Library','Implementation-Version': version,'Built-By': 'http://lab.happinesea.com/rws-lib.html','Build-Jdk': jdkVersion
  }
}
